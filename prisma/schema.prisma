generator client {
  provider = "prisma-client-js"
  previewFeatures = ["multiSchema"]
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
  schemas   = ["public", "auth"]
}

model Company {
  id                    String                 @id @default(uuid()) @db.Uuid
  name                  String
  address               String?
  phone                 String?
  createdAt             DateTime               @default(now()) @map("created_at") @db.Timestamptz(6)
  financeCategories     FinanceCategory[]
  financeTransactions   FinanceTransaction[]
  inventoryCategories   InventoryCategory[]
  inventoryItems        InventoryItem[]
  inventoryTransactions InventoryTransaction[]
  posOrders             PosOrder[]
  profiles              Profile[]
  activityLogs          TableActivityLog[]
  tableMaintenances     TableMaintenance[]
  tableReservations     TableReservation[]
  tableSessions         TableSession[]
  tables                Table[]
  joinRequests          CompanyJoinRequest[]

  @@map("companies")
  @@schema("public")
}

model Role {
  id          String   @id @default(uuid()) @db.Uuid
  name        String   @unique
  description String?
  permissions Json     @default("{\"sections\":{}}")
  createdAt   DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt   DateTime @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)
  profiles    Profile[]

  @@map("roles")
  @@schema("public")
}

model DashboardSection {
  id          String   @id @default(uuid()) @db.Uuid
  key         String   @unique
  title       String
  description String?
  icon        String?
  order       Int      @default(0)
  createdAt   DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt   DateTime @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)

  @@map("dashboard_sections")
  @@schema("public")
}

model Profile {
  id                    String                 @id @default(uuid()) @db.Uuid
  userId                String                 @unique @db.Uuid
  companyId             String?                @map("company_id") @db.Uuid
  avatarUrl             String?
  firstName             String?                @map("first_name")
  lastName              String?                @map("last_name")
  roleId                String?                @map("role_id") @db.Uuid
  role                  UserRole               @default(USER)
  active                Boolean                @default(true)
  createdAt             DateTime               @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt             DateTime               @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)
  finance_reports       finance_reports[]
  financeTransactions   FinanceTransaction[]
  inventoryTransactions InventoryTransaction[]
  company               Company?               @relation(fields: [companyId], references: [id])
  activityLogs          TableActivityLog[]
  tableSessions         TableSession[]
  joinRequests          CompanyJoinRequest[]
  userRole              Role?                  @relation(fields: [roleId], references: [id])

  @@index([companyId, userId])
  @@map("profiles")
  @@schema("public")
}

model Table {
  id           String             @id @default(uuid()) @db.Uuid
  companyId    String             @map("company_id") @db.Uuid
  name         String
  status       String?
  hourlyRate   Decimal?           @map("hourly_rate") @db.Decimal(10, 2)
  createdAt    DateTime           @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt    DateTime           @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)
  maintenances TableMaintenance[]
  reservations TableReservation[]
  sessions     TableSession[]
  company      Company            @relation(fields: [companyId], references: [id])

  @@map("tables")
  @@schema("public")
}

model TableSession {
  id          String     @id @default(uuid()) @db.Uuid
  companyId   String     @map("company_id") @db.Uuid
  tableId     String     @map("table_id") @db.Uuid
  staffId     String?    @map("staff_id") @db.Uuid
  startedAt   DateTime   @map("started_at") @db.Timestamptz(6)
  endedAt     DateTime?  @map("ended_at") @db.Timestamptz(6)
  durationMin Int?       @map("duration_min")
  totalCost   Decimal?   @map("total_cost") @db.Decimal(10, 2)
  status      String?
  createdAt   DateTime   @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt   DateTime   @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)
  posOrders   PosOrder[]
  company     Company    @relation(fields: [companyId], references: [id])
  staff       Profile?   @relation(fields: [staffId], references: [id])
  table       Table      @relation(fields: [tableId], references: [id])

  @@map("table_sessions")
  @@schema("public")
}

model TableMaintenance {
  id            String   @id @default(uuid()) @db.Uuid
  companyId     String   @map("company_id") @db.Uuid
  tableId       String   @map("table_id") @db.Uuid
  description   String?
  maintenanceAt DateTime @map("maintenance_at") @db.Timestamptz(6)
  cost          Decimal? @db.Decimal(10, 2)
  createdAt     DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt     DateTime @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)
  company       Company  @relation(fields: [companyId], references: [id])
  table         Table    @relation(fields: [tableId], references: [id])

  @@map("table_maintenance")
  @@schema("public")
}

model TableReservation {
  id            String   @id @default(uuid()) @db.Uuid
  companyId     String   @map("company_id") @db.Uuid
  tableId       String   @map("table_id") @db.Uuid
  customerName  String?  @map("customer_name")
  customerPhone String?  @map("customer_phone")
  reservedFrom  DateTime @map("reserved_from") @db.Timestamptz(6)
  reservedTo    DateTime @map("reserved_to") @db.Timestamptz(6)
  status        String?
  createdAt     DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt     DateTime @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)
  company       Company  @relation(fields: [companyId], references: [id])
  table         Table    @relation(fields: [tableId], references: [id])

  @@map("table_reservations")
  @@schema("public")
}

model TableActivityLog {
  id         String   @id @default(uuid()) @db.Uuid
  companyId  String   @map("company_id") @db.Uuid
  userId     String?  @map("user_id") @db.Uuid
  action     String
  entityType String   @map("entity_type")
  entityId   String?  @map("entity_id") @db.Uuid
  metadata   Json?
  createdAt  DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  company    Company  @relation(fields: [companyId], references: [id])
  user       Profile? @relation(fields: [userId], references: [id])

  @@index([companyId, entityType, entityId])
  @@index([companyId, userId])
  @@map("table_activity_log")
  @@schema("public")
}

model InventoryCategory {
  id          String          @id @default(uuid()) @db.Uuid
  companyId   String          @map("company_id") @db.Uuid
  name        String
  description String?
  createdAt   DateTime        @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt   DateTime        @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)
  company     Company         @relation(fields: [companyId], references: [id])
  items       InventoryItem[]

  @@map("inventory_categories")
  @@schema("public")
}

model InventoryItem {
  id                String                 @id @default(uuid()) @db.Uuid
  companyId         String                 @map("company_id") @db.Uuid
  categoryId        String?                @map("category_id") @db.Uuid
  name              String
  sku               String?                @unique
  quantity          Int                    @default(0)
  criticalThreshold Int                    @default(5) @map("critical_threshold")
  price             Decimal?               @db.Decimal(10, 2)
  createdAt         DateTime               @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt         DateTime               @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)
  category          InventoryCategory?     @relation(fields: [categoryId], references: [id])
  company           Company                @relation(fields: [companyId], references: [id])
  transactions      InventoryTransaction[]
  posOrderItems     PosOrderItem[]

  @@map("inventory_items")
  @@schema("public")
}

model PosOrder {
  id             String         @id @default(uuid()) @db.Uuid
  companyId      String         @map("company_id") @db.Uuid
  orderNumber    String         @map("order_number")
  staffId        String?        @map("staff_id") @db.Uuid
  tableSessionId String?        @map("table_session_id") @db.Uuid
  totalAmount    Decimal?       @map("total_amount") @db.Decimal(10, 2)
  paidAmount     Decimal?       @map("paid_amount") @db.Decimal(10, 2)
  createdAt      DateTime       @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt      DateTime       @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)
  orderItems     PosOrderItem[]
  company        Company        @relation(fields: [companyId], references: [id])
  tableSession   TableSession?  @relation(fields: [tableSessionId], references: [id])

  @@unique([companyId, orderNumber])
  @@map("pos_orders")
  @@schema("public")
}

model PosOrderItem {
  id                   String                @id @default(uuid()) @db.Uuid
  orderId              String                @map("order_id") @db.Uuid
  itemId               String                @map("item_id") @db.Uuid
  quantity             Int
  unitPrice            Decimal               @map("unit_price") @db.Decimal(10, 2)
  lineTotal            Decimal               @map("line_total") @db.Decimal(10, 2)
  inventoryTransaction InventoryTransaction?
  item                 InventoryItem         @relation(fields: [itemId], references: [id])
  order                PosOrder              @relation(fields: [orderId], references: [id])

  @@map("pos_order_items")
  @@schema("public")
}

model InventoryTransaction {
  id              String                   @id @default(uuid()) @db.Uuid
  companyId       String                   @map("company_id") @db.Uuid
  itemId          String                   @map("item_id") @db.Uuid
  posOrderItemId  String?                  @unique @map("pos_order_item_id") @db.Uuid
  transactionType InventoryTransactionType @map("transaction_type")
  quantityDelta   Int                      @map("quantity_delta")
  note            String?
  staffId         String?                  @map("staff_id") @db.Uuid
  createdAt       DateTime                 @default(now()) @map("created_at") @db.Timestamptz(6)
  company         Company                  @relation(fields: [companyId], references: [id])
  item            InventoryItem            @relation(fields: [itemId], references: [id])
  posOrderItem    PosOrderItem?            @relation(fields: [posOrderItemId], references: [id])
  staff           Profile?                 @relation(fields: [staffId], references: [id])

  @@map("inventory_transactions")
  @@schema("public")
}

model FinanceCategory {
  id           String               @id @default(uuid()) @db.Uuid
  companyId    String               @map("company_id") @db.Uuid
  name         String
  categoryType FinanceCategoryType  @map("category_type")
  createdAt    DateTime             @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt    DateTime             @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)
  company      Company              @relation(fields: [companyId], references: [id])
  transactions FinanceTransaction[]

  @@map("finance_categories")
  @@schema("public")
}

model FinanceTransaction {
  id              String          @id @default(uuid()) @db.Uuid
  companyId       String          @map("company_id") @db.Uuid
  categoryId      String          @map("category_id") @db.Uuid
  amount          Decimal         @db.Decimal(10, 2)
  transactionDate DateTime        @map("transaction_date") @db.Date
  description     String?
  staffId         String?         @map("staff_id") @db.Uuid
  createdAt       DateTime        @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt       DateTime        @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)
  category        FinanceCategory @relation(fields: [categoryId], references: [id])
  company         Company         @relation(fields: [companyId], references: [id])
  staff           Profile?        @relation(fields: [staffId], references: [id])

  @@map("finance_transactions")
  @@schema("public")
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model finance_reports {
  id          String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  company_id  String   @db.Uuid
  name        String
  description String?
  report_type String
  parameters  Json?    @default("{}")
  created_by  String?  @db.Uuid
  created_at  DateTime @default(now()) @db.Timestamptz(6)
  updated_at  DateTime @default(now()) @db.Timestamptz(6)
  is_template Boolean? @default(false)
  is_favorite Boolean? @default(false)
  schedule    String?
  profiles    Profile? @relation(fields: [created_by], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@index([company_id])
  @@index([created_by])
  @@schema("public")
}

model CompanyJoinRequest {
  id          String    @id @default(uuid()) @db.Uuid
  profileId   String    @map("profile_id") @db.Uuid
  companyId   String    @map("company_id") @db.Uuid
  status      JoinRequestStatus @default(PENDING)
  message     String?
  createdAt   DateTime  @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt   DateTime  @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)
  
  profile     Profile   @relation(fields: [profileId], references: [id])
  company     Company   @relation(fields: [companyId], references: [id])

  @@index([companyId, status])
  @@index([profileId])
  @@map("company_join_requests")
  @@schema("public")
}

enum UserRole {
  USER
  SELLER
  ADMIN
  SUPERADMIN

  @@schema("public")
}

enum InventoryTransactionType {
  INCOMING
  OUTGOING
  ADJUSTMENT

  @@schema("public")
}

enum FinanceCategoryType {
  INCOME
  EXPENSE

  @@schema("public")
}

enum JoinRequestStatus {
  PENDING
  APPROVED
  REJECTED

  @@schema("public")
}
