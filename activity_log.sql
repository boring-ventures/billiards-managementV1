-- Activity Log System
-- This table will track all user actions across the system

CREATE TABLE IF NOT EXISTS activity_logs (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  user_id UUID REFERENCES profiles(id) NOT NULL,
  company_id UUID NOT NULL, -- Assuming companies have UUID ids
  action_type TEXT NOT NULL, -- 'sale', 'edit', 'delete', 'login', etc.
  resource_type TEXT NOT NULL, -- 'inventory', 'order', 'table', 'finance', etc.
  resource_id TEXT, -- ID of affected resource (can be null for some actions)
  details JSONB NOT NULL DEFAULT '{}', -- Flexible details about the action
  ip_address TEXT, -- For security auditing
  created_at TIMESTAMP WITH TIME ZONE DEFAULT timezone('utc'::text, now()) NOT NULL
);

-- Create indexes for better query performance
CREATE INDEX activity_logs_user_id_idx ON activity_logs (user_id);
CREATE INDEX activity_logs_company_id_idx ON activity_logs (company_id);
CREATE INDEX activity_logs_resource_type_idx ON activity_logs (resource_type);
CREATE INDEX activity_logs_created_at_idx ON activity_logs (created_at);

-- Enable Row Level Security
ALTER TABLE activity_logs ENABLE ROW LEVEL SECURITY;

-- Create policies for access control
CREATE POLICY "Admins can see activity logs for their company"
  ON activity_logs
  FOR SELECT
  USING (auth.uid() IN (
    SELECT user_id FROM user_roles 
    WHERE role IN ('admin', 'superadmin') 
    AND company_id = activity_logs.company_id
  ));

-- Create a function to easily log activities
CREATE OR REPLACE FUNCTION log_activity(
  user_id UUID,
  company_id UUID,
  action_type TEXT,
  resource_type TEXT,
  resource_id TEXT,
  details JSONB,
  ip_address TEXT DEFAULT NULL
) RETURNS VOID AS $$
BEGIN
  INSERT INTO activity_logs (
    user_id, 
    company_id, 
    action_type, 
    resource_type, 
    resource_id, 
    details, 
    ip_address
  ) VALUES (
    user_id, 
    company_id, 
    action_type, 
    resource_type, 
    resource_id, 
    details, 
    ip_address
  );
END;
$$ LANGUAGE plpgsql SECURITY DEFINER;

-- Example trigger for POS orders to automatically log activities
CREATE OR REPLACE FUNCTION log_pos_order_activity()
RETURNS TRIGGER AS $$
BEGIN
  PERFORM log_activity(
    NEW.created_by, 
    NEW.company_id,
    'create',
    'pos_order',
    NEW.id::TEXT,
    json_build_object(
      'order_id', NEW.id,
      'total_amount', NEW.total_amount,
      'order_items', (SELECT COUNT(*) FROM pos_order_items WHERE order_id = NEW.id)
    )
  );
  RETURN NEW;
END;
$$ LANGUAGE plpgsql SECURITY DEFINER;

CREATE TRIGGER pos_order_created_trigger
AFTER INSERT ON pos_orders
FOR EACH ROW
EXECUTE FUNCTION log_pos_order_activity(); 