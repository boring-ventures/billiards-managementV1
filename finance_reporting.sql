-- Financial Reporting System
-- This script creates tables and views for comprehensive financial reporting

-- Create reports table to save report configurations
CREATE TABLE IF NOT EXISTS finance_reports (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  company_id UUID NOT NULL,
  name TEXT NOT NULL,
  description TEXT,
  report_type TEXT NOT NULL, -- 'sales', 'revenue', 'expenses', 'profit', 'custom'
  parameters JSONB DEFAULT '{}', -- Store filter params, date ranges, etc.
  created_by UUID REFERENCES profiles(id) NOT NULL,
  created_at TIMESTAMP WITH TIME ZONE DEFAULT timezone('utc'::text, now()) NOT NULL,
  updated_at TIMESTAMP WITH TIME ZONE DEFAULT timezone('utc'::text, now()) NOT NULL,
  is_template BOOLEAN DEFAULT FALSE, -- Whether this is a reusable template
  is_favorite BOOLEAN DEFAULT FALSE, -- For user favorites
  schedule TEXT -- Optional cron-style schedule for automated reports
);

-- Create indexes for better query performance
CREATE INDEX finance_reports_company_id_idx ON finance_reports (company_id);
CREATE INDEX finance_reports_created_by_idx ON finance_reports (created_by);

-- Enable Row Level Security
ALTER TABLE finance_reports ENABLE ROW LEVEL SECURITY;

-- Create policies for access control
CREATE POLICY "Users can view reports for their company"
  ON finance_reports
  FOR SELECT
  USING (auth.uid() IN (
    SELECT user_id FROM user_roles WHERE company_id = finance_reports.company_id
  ));

CREATE POLICY "Only admins can create/edit reports"
  ON finance_reports
  FOR INSERT
  WITH CHECK (auth.uid() IN (
    SELECT user_id FROM user_roles 
    WHERE role IN ('admin', 'superadmin') 
    AND company_id = finance_reports.company_id
  ));

CREATE POLICY "Only admins can update reports" 
  ON finance_reports
  FOR UPDATE
  USING (auth.uid() IN (
    SELECT user_id FROM user_roles 
    WHERE role IN ('admin', 'superadmin') 
    AND company_id = finance_reports.company_id
  ));

-- Create SQL views for common financial reports

-- Daily Sales Summary
CREATE OR REPLACE VIEW finance_daily_sales AS
SELECT 
  date_trunc('day', ft.created_at) AS day,
  ft.company_id,
  fc.name AS category,
  COUNT(ft.id) AS transaction_count,
  SUM(ft.amount) AS total_amount
FROM 
  finance_transactions ft
JOIN 
  finance_categories fc ON ft.category_id = fc.id
WHERE 
  ft.type = 'income'
GROUP BY 
  day, ft.company_id, fc.name
ORDER BY 
  day DESC, total_amount DESC;

-- Monthly Revenue Report
CREATE OR REPLACE VIEW finance_monthly_revenue AS
SELECT 
  date_trunc('month', ft.created_at) AS month,
  ft.company_id,
  SUM(CASE WHEN ft.type = 'income' THEN ft.amount ELSE 0 END) AS total_revenue,
  SUM(CASE WHEN ft.type = 'expense' THEN ft.amount ELSE 0 END) AS total_expenses,
  SUM(CASE WHEN ft.type = 'income' THEN ft.amount ELSE 0 END) - 
    SUM(CASE WHEN ft.type = 'expense' THEN ft.amount ELSE 0 END) AS net_profit
FROM 
  finance_transactions ft
GROUP BY 
  month, ft.company_id
ORDER BY 
  month DESC;

-- Product Sales Analysis
CREATE OR REPLACE VIEW finance_product_sales AS
SELECT 
  p.company_id,
  poi.item_id,
  ii.name AS product_name,
  ic.name AS category,
  COUNT(poi.id) AS times_sold,
  SUM(poi.quantity) AS total_quantity_sold,
  SUM(poi.price * poi.quantity) AS total_revenue
FROM 
  pos_order_items poi
JOIN 
  pos_orders p ON poi.order_id = p.id
JOIN 
  inventory_items ii ON poi.item_id = ii.id
JOIN 
  inventory_categories ic ON ii.category_id = ic.id
GROUP BY 
  p.company_id, poi.item_id, ii.name, ic.name
ORDER BY 
  total_revenue DESC;

-- Staff Sales Performance
CREATE OR REPLACE VIEW finance_staff_performance AS
SELECT 
  p.company_id,
  p.created_by AS staff_id,
  pr.full_name AS staff_name,
  COUNT(p.id) AS total_orders,
  SUM(p.total_amount) AS total_sales,
  AVG(p.total_amount) AS average_order_value,
  MIN(p.created_at) AS first_sale,
  MAX(p.created_at) AS last_sale
FROM 
  pos_orders p
JOIN 
  profiles pr ON p.created_by = pr.id
GROUP BY 
  p.company_id, p.created_by, pr.full_name
ORDER BY 
  total_sales DESC;

-- Function to generate a financial report based on parameters
CREATE OR REPLACE FUNCTION generate_financial_report(
  p_company_id UUID,
  p_report_type TEXT,
  p_start_date TIMESTAMP,
  p_end_date TIMESTAMP,
  p_filters JSONB DEFAULT '{}'
) RETURNS TABLE (
  report_data JSONB
) AS $$
DECLARE
  v_sql TEXT;
  v_result JSONB;
BEGIN
  -- Different SQL based on report type
  CASE p_report_type
    WHEN 'daily_sales' THEN
      SELECT json_agg(row_to_json(r)) INTO v_result
      FROM (
        SELECT * FROM finance_daily_sales
        WHERE company_id = p_company_id
        AND day BETWEEN p_start_date AND p_end_date
      ) r;
      
    WHEN 'monthly_revenue' THEN
      SELECT json_agg(row_to_json(r)) INTO v_result
      FROM (
        SELECT * FROM finance_monthly_revenue
        WHERE company_id = p_company_id
        AND month BETWEEN date_trunc('month', p_start_date) AND date_trunc('month', p_end_date)
      ) r;
      
    WHEN 'product_sales' THEN
      SELECT json_agg(row_to_json(r)) INTO v_result
      FROM (
        SELECT * FROM finance_product_sales
        WHERE company_id = p_company_id
      ) r;
      
    WHEN 'staff_performance' THEN
      SELECT json_agg(row_to_json(r)) INTO v_result
      FROM (
        SELECT * FROM finance_staff_performance
        WHERE company_id = p_company_id
      ) r;
      
    ELSE
      v_result := '{"error": "Unknown report type"}'::JSONB;
  END CASE;
  
  RETURN QUERY SELECT COALESCE(v_result, '[]'::JSONB);
END;
$$ LANGUAGE plpgsql SECURITY DEFINER; 